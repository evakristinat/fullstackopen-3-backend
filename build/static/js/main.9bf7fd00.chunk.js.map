{"version":3,"sources":["components/Filter.js","components/Persons.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Filter","search","handleSearchChange","type","value","onChange","NewPerson","addPerson","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","minLength","Persons","personsToShow","removePerson","map","person","name","number","id","onClick","Notification","message","error","className","baseUrl","personsService","getAll","axios","get","then","response","data","create","newObject","post","update","put","remove","delete","App","useState","persons","setPersons","setNewName","setNewNumber","setSearch","setMessage","setError","useEffect","initialPersons","catch","notificationTimeOut","loadPersons","emptyInputs","seconds","setTimeout","match","filter","includes","toLowerCase","updatePerson","find","n","changedPerson","status","Error","event","target","preventDefault","personObject","trim","nameDouble","findIndex","numberDouble","window","confirm","console","log","createdPerson","concat","userId","selectedPerson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9bf7fd00.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//Tätä komponenttia voidaan käyttää monissa muissakin yhteyksissä, joten se on erillinen moduulinsa\r\nconst Filter = ({ search, handleSearchChange }) => {\r\n  return (\r\n    <>\r\n      <label>filter shown with</label>\r\n      <input type=\"search\" value={search} onChange={handleSearchChange} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nconst NewPerson = ({\r\n  addPerson,\r\n  newName,\r\n  newNumber,\r\n  handleNameChange,\r\n  handleNumberChange,\r\n}) => {\r\n  return (\r\n    <form onSubmit={addPerson}>\r\n      <label>name: </label>\r\n      <input type=\"text\" value={newName} onChange={handleNameChange} />\r\n\r\n      <label>number:</label>\r\n      <input\r\n        type=\"tel\"\r\n        minLength=\"8\"\r\n        value={newNumber}\r\n        onChange={handleNumberChange}\r\n      />\r\n\r\n      <button type=\"submit\">add</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst Persons = ({ personsToShow, removePerson }) => {\r\n  return (\r\n    <table>\r\n      <tbody>\r\n        {personsToShow.map((person) => (\r\n          <tr key={person.id}>\r\n            <td key={person.name}>{person.name}</td>\r\n            <td key={person.number}>{person.number}</td>\r\n            <td>\r\n              <button value={person.id} onClick={removePerson}>\r\n                delete\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport { NewPerson, Persons };\r\n","import React from 'react';\r\n\r\nconst Notification = ({ message, error }) => {\r\n  if (message) {\r\n    return <div className=\"success\">{message}</div>;\r\n  } else if (error) {\r\n    return <div className=\"error\">{error}</div>;\r\n  } else return null;\r\n};\r\n\r\nexport default Notification;\r\n","import axios from 'axios';\r\n// baseUrl ennen Mongon käyttöä: \r\n// const baseUrl = 'http://localhost:3001/api/persons';\r\nconst baseUrl = '/api/persons';\r\n\r\n// haetaan kaikki henkilöt tietokannasta APIa hyödyntäen\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\n// luodaan uusi henkilö POSTaamalla käyttöliittymään syötetty henkilöobjekti\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\n// päivitetään annettua IDtä vastaavan henkilön tiedot käyttöliitymän tiedoilla PUTilla \r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response);\r\n};\r\n\r\n// poistetaan IDtä vastaava käyttäjä DELETEllä\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst personsService = { getAll, create, update, remove };\r\n\r\nexport default personsService;\r\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Filter from './components/Filter'\nimport { NewPerson, Persons } from './components/Persons'\nimport Notification from './components/Notification'\nimport personsService from './services/persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [search, setSearch] = useState('')\n  const [message, setMessage] = useState(null)\n  const [error, setError] = useState(null)\n\n  // Kaikki henkilöt haetaan renderöinnin jälkeen\n  useEffect(() => {\n    personsService\n      .getAll()\n      .then((initialPersons) => {\n        setPersons(initialPersons)\n      })\n      .catch((error) => {\n        setError(`The data from the server couldn't be reached`)\n        notificationTimeOut(5)\n      })\n    // Tämä tyhjä taulukko määrittää, ettei toimintoa suoriteta kuin kerran.\n  }, [])\n\n  // Henkilöiden hakeminen uudelleen tarvittaessa\n  const loadPersons = () => {\n    personsService\n      .getAll()\n      .then((initialPersons) => {\n        setPersons(initialPersons)\n      })\n      .catch((error) => {\n        setError(`The data from the server couldn't be reached`)\n        notificationTimeOut(5)\n      })\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    setSearch(event.target.value)\n  }\n\n  // Tarkistetaan löytyykö syötettyä arvoa tietokannasta saaduista tiedoista\n  const nameDoubles = () =>\n    persons.findIndex((person) => person.name === newName.trim()) > -1\n\n  const numberDoubles = () =>\n    persons.findIndex((person) => person.number === newNumber.trim()) > -1\n\n  const emptyInputs = () => {\n    setNewName('')\n    setNewNumber('')\n  }\n\n  // Ilmoitukset ja virheilmoitukset poistetaan viiden sekunnin kuluttua, ellei toisin määritetä.\n  const notificationTimeOut = (seconds = 5) => {\n    setTimeout(() => {\n      setMessage(null)\n      setError(null)\n    }, seconds * 1000)\n  }\n\n  /*Haku tehdään numeron perusteella jos search-kenttään syötetään numeroita.\n    Jos numeroita ei ole, haku tehdään case-insensitiivisesti muuttamalla vertailua\n    varten hakukohteiden nimet ja hakukentän tekstin lowercase-muotoon.*/\n  const personsToShow = search.match(/\\d/)\n    ? persons.filter((person) => person.number.includes(search))\n    : typeof search === 'string'\n    ? persons.filter((person) =>\n        person.name.toLowerCase().includes(search.toLowerCase())\n      )\n    : persons\n\n  // Henkilön poisto ja poiston varmistus.\n  const removePerson = (event) => {\n    const userId = event.target.value\n    // IDtä vastaava nimi haetaan henkilöiden tiedoista varmistusta varten.\n    const selectedPerson = persons.find((person) => person.id === userId)\n    window.confirm(`Delete ${selectedPerson.name} ?`)\n      ? personsService\n          .remove(userId)\n          .then(() => {\n            setPersons(persons.filter((person) => person.id !== userId))\n            setMessage(`Successfully deleted ${selectedPerson.name}`)\n            notificationTimeOut(3)\n          })\n          .catch((error) => {\n            setError('The person could not be found. Please refresh and retry.')\n            notificationTimeOut()\n          })\n      : console.log('Delete canceled')\n  }\n\n  /*addPerson lisää henkilön, mikäli tietoja ei ole jo lisätty ja muokkaa tietoja\n  jos nimi on jo tiedoissa. */\n  const addPerson = (event) => {\n    event.preventDefault()\n    /*henkilöt ladataan tässä kohtaa uudestaan varmistukseksi,\n    että tietoja ei voi lisätä tuplana yhtä aikaa toisella selaimella.\n    Tämän voisi toteuttaa myös muutamalla useEffectin päivitysehdon sopivaksi.*/\n    loadPersons()\n\n    if (newName && newNumber) {\n      const personObject = {\n        name: newName.trim(),\n        number: newNumber.trim(),\n      }\n\n      const nameDouble = nameDoubles()\n      const numberDouble = numberDoubles()\n\n      //jos nimi ja numero ovat uusia (ei tuplia) luodaan uusi henkilö\n      if (!nameDouble && !numberDouble) {\n        personsService\n          .create(personObject)\n          .then((createdPerson) => {\n            setPersons(persons.concat(createdPerson))\n            setMessage(`${createdPerson.name} was successfully added`)\n            notificationTimeOut(5)\n          })\n          .catch((error) => {\n            setError(error.response.data.error)\n            notificationTimeOut(6)\n          })\n      } else if (nameDouble && !numberDouble) {\n        //jos nimi esiintyy tuplana, mutta syötetty numero on uusi, kysytään halutaanko päivittää.\n        window.confirm(\n          `${personObject.name} is already added to phonebook, replace the old number with a new one?`\n        )\n          ? updatePerson(personObject.number, personObject.name).catch(\n              (error) => {\n                setError(error.response.data.error)\n                notificationTimeOut(3)\n              }\n            )\n          : console.log('canceled')\n      } else if (!nameDouble && numberDouble) {\n        //jos numero esiintyy tuplana, mutta nimi ei, ei lisäystä hyväksytä.\n        setError(`Given phonenumber is already in use`)\n        notificationTimeOut()\n      } else if (nameDouble && numberDouble) {\n        //jos mitkään ylläolevista ehdoista eivät täyty, molemmat tiedot ovat jo lisätty, eikä lisäystä hyväksytä.\n        setError(`${newName.trim()} has already been added to phonebook`)\n        notificationTimeOut()\n      }\n      emptyInputs()\n    }\n  }\n\n  //Etsii ja päivittää oikean henkilön.\n  const updatePerson = (number, name) => {\n    const id = persons.find((person) => person.name === name).id\n    const person = persons.find((n) => n.id === id)\n    const changedPerson = { ...person, number: number }\n\n    personsService\n      .update(id, changedPerson)\n      .then((response) => {\n        if (response.status === 404) {\n          // axios ei ilmoita tilaa 404 virheenä, joten se on määritettävä sellaiseksi itse\n          throw new Error('404')\n        } else {\n          loadPersons()\n          // setPersons(persons.map((n) => (n.id !== id ? n : response.data)))\n          setMessage(`${person.name}'s number was successfully updated`)\n          notificationTimeOut(5)\n        }\n      })\n      .catch((error) => {\n        setError(`Information of ${person.name} has already been deleted`)\n        notificationTimeOut(5)\n      })\n    emptyInputs()\n  }\n\n  return (\n    <main>\n      <h2>Phonebook</h2>\n\n      <Filter search={search} handleSearchChange={handleSearchChange} />\n\n      <div className=\"notification-box\">\n        <Notification message={message} error={error} />\n      </div>\n\n      <h3>Add new</h3>\n      <NewPerson\n        addPerson={addPerson}\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n\n      <h3>Numbers</h3>\n      <Persons\n        personsToShow={personsToShow}\n        removePerson={removePerson}\n        setPersons={setPersons}\n      />\n    </main>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css';\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n)"],"sourceRoot":""}